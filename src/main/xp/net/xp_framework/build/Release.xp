package net.xp_framework.build;

import util.Date;
import util.Objects;

import native standard.sprintf;
import native standard.str_replace;
import native standard.trim;

/**
 * Represents a release
 */
public class Release {
  protected Version $version;
  protected string $revision;
  protected Date $date;
  protected string $notes;

  /**
   * Constructor
   */
  public __construct($this.version= null, $this.date= null, $this.revision= null, string? $notes= null) {
    $this.setNotes($notes);
  }
  
  /**
   * Set version
   */
  public void setVersion($this.version= null) { }

  /**
   * Get version
   */
  public Version getVersion() -> $this.version;

  /**
   * Set revision
   */
  public void setRevision($this.revision) { }

  /**
   * Get revision
   */
  public string getRevision() -> $this.revision;

  /**
   * Set date
   */
  public void setDate($this.date) { }

  /**
   * Get date
   */
  public Date getDate() -> $this.date;

  /**
   * Set notes
   */
  public void setNotes(string? $notes) {
    $this.notes= trim($notes);
  }

  /**
   * Get notes
   */
  public string getNotes() -> $this.notes;

  /**
   * Returns whether another object is equal to this release
   */
  public bool equals(var $cmp) {
    return (
      $this instanceof self &&
      Objects::equal($this.version, $cmp.version) &&
      Objects::equal($this.revision, $cmp.revision) &&
      Objects::equal($this.date, $cmp.date) &&
      Objects::equal($this.notes, $cmp.notes)
    );
  }

  /**
   * Returns a string representation
   */
  public string toString() {
    return sprintf(
      "%s<%s %s @ %s> {\n  %s\n}",
      $this.getClassName(),
      null === $this.version ? '?.?.?' : $this.version.getNumber(),
      $this.revision,
      xp::stringOf($this.date),
      str_replace("\n", "\n  ", $this.notes)
    );
  }
}
