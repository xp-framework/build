package net.xp_framework.build.api;

import io.collections.FileCollection;
import io.collections.iterate.FilteredIOCollectionIterator;
import io.collections.iterate.IOCollectionIterator;
import io.collections.iterate.CollectionFilter;
import io.collections.iterate.AllOfFilter;
import io.collections.iterate.NameMatchesFilter;
import webservices.rest.srv.Response;

import native standard.basename;

/**
 * The "vendors" resource supports listing, testing and fetching 
 * information about vendors.
 */
[@webservice(path= '/vendors')]
public class VendorInformation extends AbstractBuildInformation {

  /**
   * Lists all vendors
   *
   * @param  filter The vendor name to filter on. May use "*" as wildcards
   */
  [@webmethod(verb = 'GET')]
  public var[] listVendors(Filter $filter= null) {
    if ($filter) {
      $find= new AllOfFilter([new CollectionFilter(), new NameMatchesFilter($filter.pattern)]);
    } else {
      $find= new CollectionFilter();
    }

    $vendors= [];
    foreach ($vendor in new FilteredIOCollectionIterator($this.storage, $find)) {
      $vendors[]= [ vendor : basename($vendor.getURI()) ];
    }
    return $vendors;
  }

  /**
   * Tests whether a specific vendor exists
   *
   * @param  vendor The module's vendor (the GitHub user or organization)
   */
  [@webmethod(verb = 'HEAD', path= '/{vendor}')]
  public Response hasVendor(string $vendor) {
    if ($this.storage.findCollection($vendor)) {
      return Response::ok();
    } else {
      return Response::notFound();
    }
  }

  /**
   * Gets a single vendor
   *
   * @param  vendor The module's vendor (the GitHub user or organization)
   */
  [@webmethod(verb = 'GET', path= '/{vendor}')]
  public var getVendor(string $vendor) {
    $modules= [];
    $target= $this.storage.getCollection($vendor);
    foreach ($module in new FilteredIOCollectionIterator($target, new CollectionFilter())) {
      $modules[]= basename($module.getURI());
    }
    return [ vendor : $vendor, modules : $modules ];
  }
}