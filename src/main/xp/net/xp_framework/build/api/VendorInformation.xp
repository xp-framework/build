package net.xp_framework.build.api;

import io.collections.FileCollection;
import io.collections.iterate.FilteredIOCollectionIterator;
import io.collections.iterate.IOCollectionIterator;
import io.collections.iterate.CollectionFilter;
import io.collections.iterate.AllOfFilter;
import io.collections.iterate.IterationFilter;
import io.collections.iterate.NameMatchesFilter;
import webservices.rest.srv.Response;

import native standard.basename;

[@webservice]
public class VendorInformation extends AbstractBuildInformation {

  /**
   * Gets a specific release
   *
   * @param  vendor The module's vendor (the GitHub user or organization)
   * @param  module The module's name (the GitHub repository)
   * @param  release The release version
   */
  [@webmethod(verb = 'HEAD', path = '/{vendor}')]
  public Response vendorExists(string $vendor) {
    if ($this.storage.findCollection($vendor)) {
      return Response::ok();
    } else {
      return Response::notFound();
    }
  }

  /**
   * Gets a list of all modules for a given vendor
   *
   * @param  vendor The module's vendor (the GitHub user or organization)
   * @param  filter The module name to filter on. May use "*" as wildcards
   */
  [@webmethod(verb = 'GET', path = '/{vendor}'), @$filter: param('filter')]
  public var[] modulesOf(string $vendor, Filter $filter= null) {
    if ($filter) {
      $find= new AllOfFilter([
        new CollectionFilter(),
        new NameMatchesFilter($filter.pattern)
      ]);
    } else {
      $find= new CollectionFilter();
    }

    $modules= [];
    $target= $this.storage.getCollection($vendor);
    foreach ($module in new FilteredIOCollectionIterator($target, $find)) {
      $modules[]= [
        vendor    : $vendor,
        module    : basename($module.getURI())
      ];
    }
    return $modules;
  }
}