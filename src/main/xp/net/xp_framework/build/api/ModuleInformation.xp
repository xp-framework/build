package net.xp_framework.build.api;

import io.collections.FileCollection;
import io.collections.iterate.FilteredIOCollectionIterator;
import io.collections.iterate.IOCollectionIterator;
import io.collections.iterate.CollectionFilter;
import io.collections.iterate.UriMatchesFilter;
import io.collections.iterate.AllOfFilter;
import webservices.rest.srv.Response;
import net.xp_framework.build.Version;

import native standard.basename;

/**
 * The "modules" resource supports listing, testing and fetching 
 * information about modules for a given vendor.
 */
[@webservice(path= '/vendors/{vendor}/modules')]
public class ModuleInformation extends AbstractBuildInformation {
  private static var $json= webservices.rest.RestFormat::$JSON.deserializer();

  /**
   * Lists all modules
   *
   * @param  vendor The module's vendor (the GitHub user or organization)
   * @param  filter The vendor name to filter on. May use "*" as wildcards
   */
  [@webmethod(verb = 'GET')]
  public var[] listModules(string $vendor, Filter $filter= null) {
    $target= $this.storage.getCollection($vendor);

    if ($filter) {
      $find= new AllOfFilter([new IsModule(), new UriMatchesFilter($filter.pattern)]);
    } else {
      $find= new IsModule();
    }

    $modules= [];
    foreach ($module in new FilteredIOCollectionIterator($target, $find, true)) {
      $modules[]= self::$json.deserialize($module.getInputStream(), Type::forName('[:var]'));
    }
    return $modules;
  }

  /**
   * Tests whether a specific module exists
   *
   * @param  vendor The module's vendor (the GitHub user or organization)
   * @param  module The module name
   */
  [@webmethod(verb = 'HEAD', path= '/{module}')]
  public Response hasModule(string $vendor, string $module) {
    if ($this.storage.getCollection($vendor).findCollection($module)) {
      return Response::ok();
    } else {
      return Response::notFound();
    }
  }

  /**
   * Gets a single module
   *
   * @param  vendor The module's vendor (the GitHub user or organization)
   * @param  module The module name
   */
  [@webmethod(verb = 'GET', path= '/{module}')]
  public var getModule(string $vendor, string $module) {
    $target= $this.storage.getCollection($vendor).getCollection($module);
    $module= self::$json.deserialize($target.getElement(IsModule::NAME).getInputStream(), Type::forName('[:var]'));
    $module['releases']= [:];
    foreach ($release in new FilteredIOCollectionIterator($target, new CollectionFilter())) {
      $version= new Version(basename($release.getURI()));
      $module['releases'][$version.getNumber()]= [
        series    : $version.getSeries(),
        rc        : $version.isReleaseCandidate(),
        published : $release.createdAt()
      ];
    }
    return $module;
  }
}