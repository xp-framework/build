package net.xp_framework.build.api;

import io.collections.FileCollection;
import io.collections.IOElement;
import io.collections.iterate.FilteredIOCollectionIterator;
import io.collections.iterate.IOCollectionIterator;
import io.collections.iterate.CollectionFilter;
import io.collections.iterate.AllOfFilter;
import io.collections.iterate.IterationFilter;
import io.collections.iterate.NameMatchesFilter;
import net.xp_framework.build.Version;
import webservices.rest.srv.Response;
import webservices.rest.srv.StreamingOutput;
import webservices.rest.RestFormat;
import webservices.rest.RestSerializer;
import security.checksum.SHA1;

import native standard.basename;
import native standard.array_filter;

[@webservice(path= '/vendors/{vendor}/modules/{module}/releases')]
public class ReleaseInformation extends AbstractBuildInformation {

  /**
   * Calculates a checksum for the given file
   */
  protected string checksumOf(io.collections.IOElement $element) {
    $checksum= SHA1::digest();
    try ($in = $element.getInputStream()) {
      while ($in.available()) {
        $checksum.update($in.read());
      }
    }
    return $checksum.digest();
  }

  /**
   * Gets a list of all releases for a given vendor and module
   *
   * @param  vendor The module's vendor (the GitHub user or organization)
   * @param  module The module's name (the GitHub repository)
   * @param  filter The version to filter on. May use "*" as wildcards
   */
  [@webmethod(verb = 'GET'), @$filter: param('filter')]
  public var[] listReleases(string $vendor, string $module, Filter $filter= null) {
    $target= $this.storage.getCollection($vendor).getCollection($module);

    if ($filter) {
      $find= new AllOfFilter([new CollectionFilter(), new NameMatchesFilter($filter.pattern)]);
    } else {
      $find= new CollectionFilter();
    }

    $releases= [];
    foreach ($release in new FilteredIOCollectionIterator($target, $find)) {
      $releases[]= [
        vendor    : $vendor,
        module    : $module,
        version   : new Version(basename($release.getURI())),
        published : $release.createdAt()
      ];
    }
    return $releases;
  }

  /**
   * Gets a specific release
   *
   * @param  vendor The module's vendor (the GitHub user or organization)
   * @param  module The module's name (the GitHub repository)
   * @param  release The release version
   */
  [@webmethod(verb = 'HEAD', path = '/{release}')]
  public Response hasRelease(string $vendor, string $module, string $release) {
    if ($this.storage.getCollection($vendor).getCollection($module).findCollection($release)) {
      return Response::ok();
    } else {
      return Response::notFound();
    }
  }

  /**
   * Gets a specific release
   *
   * @param  vendor The module's vendor (the GitHub user or organization)
   * @param  module The module's name (the GitHub repository)
   * @param  release The release version
   */
  [@webmethod(verb = 'GET', path = '/{release}')]
  public var getRelease(string $vendor, string $module, string $release) {
    $target= $this.storage.getCollection($vendor).getCollection($module).findCollection($release);
    if (!$target) {
      throw new ElementNotFoundException('No such release ' ~ $release ~ ' for ' ~ $vendor ~ '/' ~ $module);
    }

    // Aggregate all files
    $files= new string[] {};
    foreach ($file in new IOCollectionIterator($target)) {
      $files[]= [ 
        name : basename($file.getURI()),
        size : $file.getSize(),
        sha1 : $this.checksumOf($file)
      ];
    }

    // Return release meta information and files
    return [
      vendor    : $vendor,
      module    : $module,
      version   : new Version($release),
      published : $target.createdAt(),
      files     : $files
    ];
  }

  /**
   * Gets a specific release file
   *
   * @param  vendor The module's vendor (the GitHub user or organization)
   * @param  module The module's name (the GitHub repository)
   * @param  release The release version
   */
  [@webmethod(verb = 'GET', path = '/{release}/{file}')]
  public StreamingOutput downloadFile(string $vendor, string $module, string $release, string $file) {
    $target= $this.storage
      .getCollection($vendor)
      .getCollection($module)
      .getCollection($release)
      .findElement($file)
    ;
    if (!$target) {
      throw new ElementNotFoundException('No file ' ~ $file ~ ' in release ' ~ $release ~ ' for ' ~ $vendor ~ '/' ~ $module);
    }

    return StreamingOutput::of($target);
  }
}