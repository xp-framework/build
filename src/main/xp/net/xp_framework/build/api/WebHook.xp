package net.xp_framework.build.api;

import webservices.rest.srv.Response;
import webservices.rest.RestFormat;
import util.log.LogCategory;
import util.Properties;
import io.IOException;
import io.streams.MemoryInputStream;
import io.collections.FileCollection;
import io.collections.IOElement;
import org.codehaus.stomp.StompConnection;

import native standard.sscanf;
import native standard.chmod;

/**
 * Web hook to capture tag creation
 *
 */
[@webservice(path= '/hook')]
public class WebHook {
  private LogCategory $cat;
  private StompConnection $queue;
  private FileCollection $storage;
  private string $destination;

  private static var $json = RestFormat::$JSON.serializer();

  /**
   * Sets a logger category for debugging
   */
  [@inject(name = 'trace')]
  public void setTrace(LogCategory $cat= null) {
    $this.cat= $cat;
  }

  /**
   * Injects message queue configuration
   */
  [@inject(name = 'mq')]
  public void useMessageQueue(Properties $prop) {
    $this.queue= new StompConnection($prop.readString('endpoint', 'host'), $prop.readInteger('endpoint', 'port'));
    $this.queue.connect($prop.readString('endpoint', 'user'), $prop.readString('endpoint', 'pass'));
    $this.destination= $prop.readString('destinations', 'trigger');
  }

  /**
   * Use configuration to inject release storage
   */
  [@inject(name = 'xarrelease')]
  public void useStorage(Properties $prop) {
    $this.storage= new FileCollection($prop.readString('storage', 'folder', 'releases'));
  }

  /**
   * Disconnects from queue
   */
  public void __destruct() {
    $this.queue.disconnect();
  }

  /**
   * Change permissions
   */
  private IOElement create(IOElement $element, int? $permissions) {
    if (false === chmod($element.getURI(), $permissions)) {
      throw new io.IOException('Cannot change permissions for ' ~ $element.getURI() ~ ' to ' ~ $permissions);
    }
    return $element;
  }

  /**
   * GitHub passes a JSON string as value for the "payload" form variable
   *
   * @see https://help.github.com/articles/post-receive-hooks
   */
  [@webmethod(verb= 'POST', accepts= 'application/x-www-form-urlencoded'), @$in: param('payload')]
  public Response githubTrigger(string? $in) {
    try {
      $payload= RestFormat::$JSON.read(new MemoryInputStream($in), GitHubPayload::class) as GitHubPayload;
    } catch (FormatException $e) {
      $this.cat && $this.cat.warn('Malformed payload', $e);
      return Response::error(400).withPayload('Malformed payload: ' ~ $e.compoundMessage());
    }

    // Create vendor and module if not existant
    try {
      if (!($vendor= $this.storage.findCollection($payload.repository.owner.name))) {
        $this.cat && $this.cat.warn('Unrecognized vendor, ignoring', $payload.repository.owner);
        return Response::error(403).withPayload('Not allowed here');
      }

      if (!($module= $vendor.findCollection($payload.repository.name))) {
        $this.cat && $this.cat.info('New module', $payload.repository);
        $module= $this.create($vendor.newCollection($payload.repository.name), 0777);
      }

      if (!($info= $module.findElement('module.json'))) {
        $info= $this.create($module.newElement('module.json'), 0666);
      }

      with ($out= $info.getOutputStream()) {
        $out.write(self::$json.serialize([
          vendor   : $payload.repository.owner.name,
          module   : $payload.repository.name,
          info     : $payload.repository.description,
          link     : $payload.repository.url
        ]));
        $out.close();
      }
    } catch (IOException $e) {
      $this.cat && $this.cat.warn('Storage error, continuing anyways', $e);
    }

    // Created a tag -> trigger
    if ($payload.created && ($tag= $payload.getTag())) {
      $version= null;
      sscanf($tag, 'r%[0-9A-Za-z.~]', $version);

      $message= self::$json.serialize([
        owner   : $payload.repository.owner.name,
        repo    : $payload.repository.name,
        tag     : $tag,
        version : $version,
        user    : $payload.pusher.name
      ]);
      $this.cat && $this.cat.info($this.destination, $message);
      $this.queue.send($this.destination, $message, [
        'content-type' : self::$json.contentType()
      ]);
    } else {
      $this.cat && $this.cat.debug('Ignore', $payload);
    }

    return Response::created();
  }
}