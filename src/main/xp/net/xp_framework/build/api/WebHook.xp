package net.xp_framework.build.api;

import webservices.rest.srv.Response;
import webservices.rest.RestFormat;
import util.log.LogCategory;
import io.streams.MemoryInputStream;

/**
 * Web hook to capture tag creation
 *
 */
[@webservice(path= '/hook')]
public class WebHook {
  private LogCategory $cat;

  /**
   * Sets a logger category for debugging
   */
  [@inject(name = 'trace')]
  public void setTrace(LogCategory $cat= null) {
    $this.cat= $cat;
  }

  /**
   * GitHub passes a JSON string as value for the "payload" form variable
   *
   * @see https://help.github.com/articles/post-receive-hooks
   */
  [@webmethod(verb= 'POST', accepts= 'application/x-www-form-urlencoded'), @$in: param('payload')]
  public Response githubTrigger(string? $in) {
    try {
      $payload= RestFormat::$JSON.read(new MemoryInputStream($in), GitHubPayload::class) as GitHubPayload;
    } catch (FormatException $e) {
      return Response::error(400).withPayload('Malformed payload: ' ~ $e.compoundMessage());
    }

    // Created a tag -> trigger
    if ($payload.created && ($tag= $payload.getTag())) {
      $this.cat && $this.cat.info('Creating release', $tag, 'started by', $payload.pusher.name);
      // TBI
    } else {
      $this.cat && $this.cat.debug('Ignore', $payload);
    }

    return Response::created();
  }
}