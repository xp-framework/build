package net.xp_framework.build.subscriber;

import peer.http.HttpConnection;
import peer.http.HttpConstants;
import io.Folder;
import io.File;
import io.FileUtil;
import io.archive.zip.ZipFile;
import io.archive.zip.ZipArchiveReader;
import io.streams.StreamTransfer;
import io.streams.MemoryInputStream;
import io.streams.TextReader;
import lang.archive.Archive;
import io.collections.IOCollection;
import io.collections.FileCollection;
import io.collections.iterate.FilteredIOCollectionIterator;
import io.collections.iterate.NegationOfFilter;
import io.collections.iterate.CollectionFilter;
import io.collections.iterate.ExtensionEqualsFilter;
import net.xp_framework.build.Version;
import net.xp_framework.build.Release;
import net.xp_framework.build.ChangeLog;
import util.Date;
import util.Properties;

import native standard.sprintf;
import native standard.sscanf;
import native standard.basename;
import native standard.rtrim;
import native standard.str_replace;
import native standard.strtr;
import native pcre.preg_replace;
import native pcre.preg_quote;
import native core.strlen;

/**
 * Fetches repository and extracts locally
 */
public class FetchRepository extends AbstractSubscriber {

  // The first %s token is replaced with the owner, the second with
  // the repository, and the third and last with the tag name
  const string ZIPBALL= 'https://github.com/%s/%s/zipball/%s';
  const string CHANGELOG= 'https://raw.github.com/%s/%s/%s/core/ChangeLog';

  private Folder $target;

  /**
   * React directly on the trigger
   */
  protected string origin() {
    return 'trigger';
  }

  /**
   * Publishes final
   */
  protected string destination() {
    return 'build';
  }

  /**
   * Injects fetch configuration
   */
  [@inject(name = 'fetch')]
  public void useCheckout(Properties $prop) {
    $this.target= new Folder($prop.readString('storage', 'folder', 'checkout'));
    $this.target.exists() || $this.target.create(0755);
  }

  /**
   * Download ChangeLog from github
   */
  protected ChangeLog changeLogAt(string $url) throws IllegalStateException {
    $response= $this.connectionTo($url).get();
    if (HttpConstants::STATUS_OK !== $response.getStatusCode()) {
      throw new IllegalStateException('Cannot find changelog @ ' ~ $url ~ ': ' ~ $response.toString());
    }
    
    $log= new ChangeLog();
    try ($reader= new TextReader($response.getInputStream(), 'utf-8')) {
      $separator= 'Version %[0-9?.], released %[0-9?-]';

      // Seek for first separator
      $version= $date= null;
      do {
        if (null === ($l= $reader.readLine())) {
          throw new IllegalStateException('ChangeLog malformed');
        }
      } while (2 !== sscanf($l, $separator, $version, $date));

      // Parse rest of file
      do {
        $release= new Release();
        $release.setVersion('?.?.?' === $version ? null : new Version($version));
        $release.setDate('????-??-??' === $date ? Date::now() : new Date($date));

        // Skip over "----" line
        $reader.readLine();

        // Extract revision (either: SVN version: 12345 or GIT commit: 12345)
        $rev= null;
        sscanf($reader.readLine(), '%*[^:]: %s', $rev);
        $release.setRevision($rev);

        // Read notes      
        $notes= '';
        $version= $date= null;
        while (null !== ($l= $reader.readLine())) {
          if (2 === sscanf($l, $separator, $version, $date)) break;
          $notes~= $l ~ "\n";
        }

        $release.setNotes(rtrim($notes, "\r\n"));
        $log.addRelease($release);
      } while (null !== $l);
    }

    return $log;
  }

  /**
   * Creates a HTTP connection. Uses a timeout of 10 seconds at github
   * is a bit slow in responding from while to while
   */
  protected HttpConnection connectionTo(string $url) {
    $conn= new HttpConnection($url);
    $conn.setConnectTimeout(10.0);
    return $conn;
  }

  /**
   * Fetches a ZIP file
   */
  protected ZipArchiveReader zipballOf(string $url, Folder $tempDir) {
    $headers= [:];
    do {
      $this.out.write('===> ', $url, ': ');
      $response= $this.connectionTo($url, $headers).get();
      switch ($response.statusCode()) {
        case HttpConstants::STATUS_OK:

          // Calculate file name
          if ($disposition= $response.header('Content-Disposition')) {
            $filename= null;
            sscanf($disposition[0], 'attachment; filename=%s', $filename);
          } else {
            $filename= basename($url);
          }

          // Download to a temporary location and store there so we will later be
          // able to reuse it - being nice to github's bandwidth here:)
          $tmp= new File($tempDir, $filename);
          if ($tmp.exists() && $tmp.size() == $response.header('Content-Length')[0]) {
            $this.out.writeLine('Reusing local copy');
          } else {
            $this.out.write('Downloading... ');
            try ($xfr= new StreamTransfer($response.getInputStream(), $tmp.getOutputStream())) {
              $xfr.transferAll();
            }
            $this.out.writeLine('Done');
          }

          return ZipFile::open($tmp.getInputStream());

        case HttpConstants::STATUS_FOUND: case HttpConstants::STATUS_SEE_OTHER:
          $this.out.writeLine('Redirect');
          $headers['Referer']= $url;
          $url= $response.header('Location')[0];
          continue;

        default:
          $this.out.writeLine('Error');
          throw new IllegalStateException('Unexpected response for ' ~ $url ~ ': ' ~ $response.toString());
      }
    } while (1);

    // Unreachable
  }

  /**
   * Handler for messages
   */
  [@handler]
  public [:var] fetch([:var] $build) {
    $version= new Version($build['version']);
    $this.out.writeLine('===> ', $version);

    // Process changelog
    $log= $this.changeLogAt(sprintf(self::CHANGELOG, $build['owner'], $build['repo'], $build['tag']));
    if ($version.isReleaseCandidate()) {
      $release= $log.getRelease(null);         // Use not yet named release
      $release.setVersion($version);
      $release.setRevision($build['tag']);
    } else {
      $release= $log.getRelease($version);
    }

    $targetDir= new Folder($this.target, $build['owner'], $build['repo'], $build['tag']);
    $targetDir.exists() || $targetDir.create(0755);

    // Download zip file
    $zip= $this.zipballOf(sprintf(self::ZIPBALL, $build['owner'], $build['repo'], $build['tag']), $targetDir);

    // Extract the zip file
    $this.out.write('---> Exporting [');
    with ($iter= $zip.iterator()) {
      $base= rtrim(($iter.next() as io.archive.zip.ZipDirEntry).getName() ~ '/', '/');
      while ($iter.hasNext()) {
        $entry= $iter.next();
        $relative= str_replace($base, '', $entry.getName());
        if ($entry.isDirectory()) {
          $folder= new Folder($targetDir, $relative);
          $folder.exists() || $folder.create(0755);
        } else {
          $file= new File($targetDir, $relative);
          try ($tran= new StreamTransfer($entry.getInputStream(), $file.getOutputStream())) {
            $tran.transferAll();
          }
        }
        $this.out.write('.');
      }
    }
    $zip.close();
    $this.out.writeLine(']');

    // Republish for build process
    return [ 
      module   : $build['owner'] ~ '/' ~ $build['repo'], 
      release  : $release, 
      checkout : $targetDir.getURI()
    ];
  }
}