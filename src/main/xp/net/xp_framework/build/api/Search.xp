package net.xp_framework.build.api;

import io.collections.FileCollection;
import io.collections.iterate.FilteredIOCollectionIterator;
import io.collections.iterate.AllOfFilter;
import io.collections.iterate.UriMatchesFilter;
import text.regex.Pattern;

import native standard.basename;

[@webservice(path= '/search')]
public class Search extends AbstractBuildInformation {
  private static var $json= webservices.rest.RestFormat::$JSON.deserializer();

  /**
   * Searches for modules
   *
   * @param  query the query string
   * @return var[] results
   */
  [@webmethod(verb = 'GET'), @$query: param('q')]
  public var[] forModules(string? $query) {
    $find= new AllOfFilter([
      new IsModule(),
      new UriMatchesFilter(Pattern::compile($query, Pattern::CASE_INSENSITIVE))
    ]);

    $found= [];
    foreach ($module in new FilteredIOCollectionIterator($this.storage, $find, true)) {
      $found[]= self::$json.deserialize($module.getInputStream(), Type::forName('[:var]'));
    }
    return $found;
  }
}