package net.xp_framework.build.subscriber;

import util.Properties;
import peer.stomp.Connection;

import native standard.explode;
import native standard.substr;

/**
 * Trigger a release build
 */
public class TriggerRelease extends util.cmd.Command {
  private Connection $queue = null;
  private [:string] $destinations;
  private string $destination;
  private io.Folder $target;

  protected static var $json= new net.xp_framework.build.Json();

  /**
   * Injects message queue configuration
   */
  [@inject(name = 'mq')]
  public void useMessageQueue(Properties $prop) {
    $this.queue= new Connection($prop.readString('endpoint', 'url'));
    $this.queue.connect();
    $this.destinations= $prop.readSection('destinations');
  }

  /**
   * Sets target dir
   */
  [@arg(position = 0)]
  public void setTarget(string? $dir) {
    $this.target= new io.Folder($dir);
  }

  /**
   * Sets which message queue to use
   */
  [@arg(position = 1)]
  public void setQueue(string? $name) {
    if (!isset($this.destinations[$name])) {
      throw new lang.IllegalArgumentException('No such destination "' ~ $name ~ '", have: ' ~ xp::stringOf($this.destinations));
    }
    $this.destination= $this.destinations[$name];
  }

  /**
   * Listens
   */
  public int run() {
    $parts= explode(DIRECTORY_SEPARATOR, $this.target.getURI()) as string[]?;
    $release= substr($parts[$parts.length - 2], 1);   // r5.9.0
    $module= $parts[$parts.length - 3];
    $vendor= $parts[$parts.length - 4];

    with ($dest= $this.queue.getDestination($this.destination)) {
      $message= self::$json.write([
        build    : $json.deserializer().deserialize(new io.File($this.target, 'xpbuild.json').getInputStream()),
        vendor   : $vendor,
        module   : $module,
        release  : $release,
        checkout : $this.target.getURI()
      ]);

      $dest.send(new peer.stomp.SendableMessage($message, self::$json.contentType()));
      $this.out.writeLine('Publish -> ', $this.destination, ': ', $message);
    }
    return 0;
  }

  /**
   * Destructor. Closes connection to MQ
   */
  public void __destruct() {
    if (null !== $this.queue) $this.queue.disconnect();
  }
}