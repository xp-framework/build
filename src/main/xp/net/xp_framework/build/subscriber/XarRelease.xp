package net.xp_framework.build.subscriber;

import peer.http.HttpConnection;
import peer.http.HttpConstants;
import io.Folder;
import io.File;
import io.FileUtil;
import io.streams.StreamTransfer;
import io.streams.MemoryInputStream;
import io.streams.TextReader;
import lang.archive.Archive;
import io.collections.IOCollection;
import io.collections.FileCollection;
import io.collections.iterate.FilteredIOCollectionIterator;
import io.collections.iterate.NegationOfFilter;
import io.collections.iterate.CollectionFilter;
import io.collections.iterate.ExtensionEqualsFilter;
import net.xp_framework.build.Version;
import net.xp_framework.build.Release;
import net.xp_framework.build.ChangeLog;
import util.Date;
import util.Properties;

import native standard.sprintf;
import native standard.sscanf;
import native standard.basename;
import native standard.rtrim;
import native standard.str_replace;
import native standard.strtr;
import native pcre.preg_replace;
import native pcre.preg_quote;
import native core.strlen;

/**
 * Creates the .xar-based releases
 */
public class XarRelease extends AbstractSubscriber {
  private Folder $release;

  /**
   * React on builds
   */
  protected string origin() {
    return 'build.xar';
  }

  /**
   * Does not publish a result
   */
  protected string destination() {
    return null;
  }

  /**
   * Injects xarrelease configuration
   */
  [@inject(name = 'xarrelease')]
  public void useRelease(Properties $prop) {
    $this.release= new Folder($prop.readString('storage', 'folder', 'release'));
  }

  /**
   * Adds a file or a string to a given index
   *
   * @param   arg either an io.File or a string
   */
  protected void addIndex(io.streams.FileOutputStream $ar, var $arg, string $name= null) {
    if ($arg instanceof File) {
      $f= $arg as File?;
      $size= $f.size();
      isset($name) || $name= $f.getFilename();
      $stream= $f.getInputStream();
    } else {
      $size= strlen($arg);
      $stream= new MemoryInputStream($arg);
    }

    $ar.write(sprintf("--%d:%s:--\n", $size, $name));
    try ($stream) {
      while ($stream.available()) {
        $ar.write($stream.read());
      }
    }
  }

  /**
   * Add all files from a given collection
   *
   * @param   archive - must be opened with ARCHIVE_CREATE
   */
  protected void addAll(Archive $archive, IOCollection $collection, string $base) {
    $iterator= new FilteredIOCollectionIterator(
      $collection,
      new NegationOfFilter(new CollectionFilter()),
      true
    );
    $i= 0;
    while ($iterator.hasNext()) {
      $uri= $iterator.next().getURI();
      $urn= strtr(preg_replace('#^(' ~ preg_quote($base, '#') ~ '|/)#', '', $uri), DIRECTORY_SEPARATOR, '/');
      $archive.add(new File($uri), $urn);
      $i++ % 10 || $this.out.write('.');
    }
  }

  /**
   * Handler for messages
   */
  [@handler]
  public void createXarRelease([:var] $build) {
    $this.out.writeLine('---> ', $build['module'], ' REL ', $build['release'], ' @ ', $build['checkout']);
    $version= $build['release']['version'];

    // Create version
    $targetDir= new Folder($this.release, $version['number']);
    $targetDir.exists() || $targetDir.create(0755);
    $tempDir= new Folder($targetDir, 'tmp');
    $tempDir.exists() || $tempDir.create(0755);

    // xp-rt-[VERSION].xar
    $coreSrc= new Folder($build['checkout'], 'core', 'src', 'main', 'php');
    $rtArchive= new Archive(new File($tempDir, 'xp-rt-' ~ $version['number'] ~ '.xar'));
    $rtArchive.open(ARCHIVE_CREATE);
    $rtArchive.addBytes('VERSION', $version['number']);
    foreach ($package in ['lang', 'xp', 'util', 'io', 'sapi', 'peer', 'rdbms', 'math', 'scriptlet', 'xml', 'remote', 'text', 'unittest', 'webservices', 'img', 'security', 'gui']) {
      $this.out.write('     >> ', $coreSrc, ' & ', $package, ' [');
      $this.addAll($rtArchive, new FileCollection(new Folder($coreSrc, $package)), $coreSrc.getURI());
      $this.out.writeLine(']');
    }
    $rtArchive.create();

    // xp-test-[VERSION].xar
    $testSrc= new Folder($build['checkout'], 'core', 'src', 'test', 'php');
    $testRes= new Folder($build['checkout'], 'core', 'src', 'test', 'resources');
    $utArchive= new Archive(new File($tempDir, 'xp-test-' ~ $version['number'] ~ '.xar'));
    $utArchive.open(ARCHIVE_CREATE);
    foreach ($origin in [$testSrc, $testRes]) {
      $this.out.write('     >> ', $origin, ' [');
      $this.addAll($utArchive, new FileCollection($origin), $origin.getURI());
      $this.out.writeLine(']');
    }
    $utArchive.create();

    // Index: Libraries
    try ($clIndex= new File($targetDir, 'lib.ar').getOutputStream()) {
      $this.out.writeLine('---> ', $clIndex);
      foreach ($entry in [$rtArchive, $utArchive]) {
        $this.addIndex($clIndex, $entry.file, 'lib/' ~ $entry.file.getFilename());
      }
    }

    // Index: Tools
    $toolSrc= new Folder($build['checkout'], 'core', 'tools');
    try ($tsIndex= new File($targetDir, 'tools.ar').getOutputStream()) {
      $this.out.writeLine('---> ', $tsIndex);
      foreach ($tool in ['class.php', 'web.php', 'xar.php', 'lang.base.php']) {
        $this.addIndex($tsIndex, new File($toolSrc, $tool), 'tools/' ~ $tool);
      }
    }

    // Index: Dependencies
    try ($dpIndex= new File($targetDir, 'depend.ar').getOutputStream()) {
      $this.out.writeLine('---> ', $dpIndex);
      $this.addIndex($dpIndex, new File('res', $version['series'] ~ '-depend.ini'), 'depend.ini');
    }

    // Index: Meta information and test config
    $testCfg= new Folder($build['checkout'], 'core', 'src', 'test', 'config', 'unittest');
    try ($miIndex= new File($targetDir, 'meta-inf.ar').getOutputStream()) {
      $this.out.writeLine('---> ', $tsIndex);
      $this.addIndex($miIndex, $build['release']['notes'], 'ChangeLog');
      $this.addIndex($miIndex, "lib/" ~ $rtArchive.file.getFileName() ~ "\n", 'boot.pth');
      $config= new FilteredIOCollectionIterator(new FileCollection($testCfg), new ExtensionEqualsFilter('.ini'));
      foreach ($ini in $config) {
        $f= new File($ini.getURI());
        $this.addIndex($miIndex, $f, 'unittest/' ~ $f.getFileName());
        $this.out.writeLine('     >> ', $f.getFileName());
      }
    }

    // Add setup script
    FileUtil::setContents(new File($targetDir, 'setup'), str_replace(
      '@@VERSION@@', 
      $version['number'], 
      FileUtil::getContents(new File('res', $version['series'] ~ '-setup.php.in'))
    ));

    // Clean up
    $this.out.writeLine('===> ', $targetDir);
    $tempDir.unlink();
    $this.out.writeLine('===> Done');
  }
}