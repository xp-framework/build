package net.xp_framework.build.subscriber;

import peer.http.HttpConnection;
import peer.http.HttpConstants;
import io.Folder;
import io.File;
import io.FileUtil;
import io.streams.StreamTransfer;
import io.streams.MemoryInputStream;
import io.streams.TextReader;
import lang.archive.Archive;
import io.collections.IOCollection;
import io.collections.FileCollection;
import io.collections.iterate.FilteredIOCollectionIterator;
import io.collections.iterate.NegationOfFilter;
import io.collections.iterate.CollectionFilter;
import io.collections.iterate.ExtensionEqualsFilter;
import util.Date;
import util.Properties;

import native standard.strtr;
import native pcre.preg_replace;
import native pcre.preg_quote;

/**
 * Creates the .xar-based releases
 */
public class XarRelease extends AbstractSubscriber {
  private static var $finalizers= lang.reflect.Package::forName('net.xp_framework.build.subscriber');
  private Folder $release;

  /**
   * React on builds
   */
  protected string origin() {
    return 'build.xar';
  }

  /**
   * Does not publish a result
   */
  protected string destination() {
    return null;
  }

  /**
   * Injects xarrelease configuration
   */
  [@inject(name = 'xarrelease')]
  public void useRelease(Properties $prop) {
    $this.release= new Folder($prop.readString('storage', 'folder', 'release'));
  }

  /**
   * Add all files from a given collection
   *
   * @param   archive - must be opened with ARCHIVE_CREATE
   */
  protected void addAll(Archive $archive, IOCollection $collection, string $base) {
    $iterator= new FilteredIOCollectionIterator(
      $collection,
      new NegationOfFilter(new CollectionFilter()),
      true
    );
    $i= 0;
    while ($iterator.hasNext()) {
      $uri= $iterator.next().getURI();
      $urn= strtr(preg_replace('#^(' ~ preg_quote($base, '#') ~ '|/)#', '', $uri), DIRECTORY_SEPARATOR, '/');
      $archive.add(new File($uri), $urn);
      $i++ % 10 || $this.out.write('.');
    }
  }

  /**
   * Handler for messages
   */
  [@handler]
  public void createXarRelease([:var] $build) {
    $this.out.writeLine('---> ', $build['vendor'], '/', $build['module'], ' R ', $build['release'], ' @ ', $build['checkout']);
    $version= $build['release']['version'];

    // Create version
    $targetDir= new Folder($this.release, $build['vendor'], $build['module'], $version['number']);
    $targetDir.exists() || $targetDir.create(0755);
    $tempDir= new Folder($targetDir, 'tmp');
    $tempDir.exists() || $tempDir.create(0755);

    // Process src/main/*, src/test/* and store in archives
    $archives= [:];
    $baseDir= new Folder($build['checkout'], $build['build']['base']);
    foreach ($type in ['main', 'test']) {
      $srcDir= new Folder($baseDir, 'src', $type);
      $archive= new Archive(new File($tempDir, isset($build['build']['naming'][$type])
        ? strtr($build['build']['naming'][$type], [ '{VERSION}' : $version['number'] ]) ~ '.xar'
        : 'xp-' ~ $build['module'] ~ '-' ~ $version['number'] ~ '.xar'
      ));
      $archive.open(ARCHIVE_CREATE);
      $this.out.writeLine('---> ', $archive);
      foreach ($origin in new FilteredIOCollectionIterator(new FileCollection($srcDir), new CollectionFilter())) {
        $this.out.write('     >> Copy ', $origin, ' [');
        $this.addAll($archive, $origin, $origin.getURI());
        $this.out.writeLine(']');
      }
      $archive.addBytes('VERSION', $version['number']);
      $archive.create();
      $archives[$type]= $archive;
    }

    // Finalize
    $finalize= isset($build['build']['finalize']) ? $build['build']['finalize'] : 'Default';
    $this.out.writeLine('---> ', $finalize, 'Finalizer');
    try {
      self::$finalizers.loadClass($finalize ~ 'Finalizer').newInstance().finalize(
        $build,
        $archives,
        $targetDir
      );
    } catch (lang.reflect.TargetInvocationException $e) {
      throw $e.getCause();
    }

    // Clean up
    $this.out.writeLine('---> ', $targetDir);
    $tempDir.unlink();
    $this.out.writeLine('===> Done');
  }
}