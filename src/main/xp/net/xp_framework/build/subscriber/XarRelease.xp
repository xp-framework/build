package net.xp_framework.build.subscriber;

import peer.http.HttpConnection;
import peer.http.HttpConstants;
import io.Folder;
import io.File;
import io.archive.zip.ZipFile;
import io.archive.zip.ZipArchiveReader;
import io.streams.StreamTransfer;
import io.streams.MemoryInputStream;
import lang.archive.Archive;
import io.collections.IOCollection;
import io.collections.FileCollection;
import io.collections.iterate.FilteredIOCollectionIterator;
import io.collections.iterate.NegationOfFilter;
import io.collections.iterate.CollectionFilter;
import net.xp_framework.build.Version;

import native standard.sprintf;
import native standard.sscanf;
import native standard.basename;
import native standard.rtrim;
import native standard.str_replace;
import native standard.strtr;
import native pcre.preg_replace;
import native pcre.preg_quote;
import native core.strlen;

/**
 * Creates the .xar-based releases
 */
public class XarRelease extends AbstractSubscriber {

  // The first %s token is replaced with the owner, the second with
  // the repository, and the third and last with the tag name
  const string ZIPBALL= 'https://github.com/%s/%s/zipball/%s';

  private Folder $tmp;

  /**
   * Creates a HTTP connection. Uses a timeout of 10 seconds at github
   * is a bit slow in responding from while to while
   */
  protected HttpConnection connectionTo(string $url) {
    $conn= new HttpConnection($url);
    $conn.setConnectTimeout(10.0);
    return $conn;
  }

  /**
   * Fetches a ZIP file
   */
  protected ZipArchiveReader zipballOf(string $url, Folder $tempDir) {
    $headers= [:];
    do {
      $this.out.write('===> ', $url, ': ');
      $response= $this.connectionTo($url, $headers).get();
      switch ($response.statusCode()) {
        case HttpConstants::STATUS_OK:

          // Calculate file name
          if ($disposition= $response.header('Content-Disposition')) {
            $filename= null;
            sscanf($disposition[0], 'attachment; filename=%s', $filename);
          } else {
            $filename= basename($url);
          }

          // Download to a temporary location and store there so we will later be
          // able to reuse it - being nice to github's bandwidth here:)
          $tmp= new File($tempDir, $filename);
          if ($tmp.exists() && $tmp.size() == $response.header('Content-Length')[0]) {
            $this.out.writeLine('Reusing local copy');
          } else {
            $this.out.write('Downloading... ');
            try ($xfr= new StreamTransfer($response.getInputStream(), $tmp.getOutputStream())) {
              $xfr.transferAll();
            }
            $this.out.writeLine('Done');
          }

          return ZipFile::open($tmp.getInputStream());

        case HttpConstants::STATUS_FOUND: case HttpConstants::STATUS_SEE_OTHER:
          $this.out.writeLine('Redirect');
          $headers['Referer']= $url;
          $url= $response.header('Location')[0];
          continue;

        default:
          $this.out.writeLine('Error');
          throw new IllegalStateException('Unexpected response for ' ~ $url ~ ': ' ~ $response.toString());
      }
    } while (1);

    // Unreachable
  }

  /**
   * Adds a file or a string to a given index
   *
   * @param   arg either an io.File or a string
   */
  protected void addIndex(io.streams.FileOutputStream $ar, var $arg, string $name= null) {
    if ($arg instanceof File) {
      $f= $arg as File?;
      $size= $f.size();
      isset($name) || $name= $f.getFilename();
      $stream= $f.getInputStream();
    } else {
      $size= strlen($arg);
      $stream= new MemoryInputStream($arg);
    }

    $ar.write(sprintf("--%d:%s:--\n", $size, $name));
    while ($stream.available()) {
      $ar.write($stream.read());
    }
  }

  /**
   * Add all files from a given collection
   *
   * @param   archive - must be opened with ARCHIVE_CREATE
   */
  protected void addAll(Archive $archive, IOCollection $collection, string $base) {
    $iterator= new FilteredIOCollectionIterator(
      $collection,
      new NegationOfFilter(new CollectionFilter()),
      true
    );
    $i= 0;
    while ($iterator.hasNext()) {
      $uri= $iterator.next().getURI();
      $urn= strtr(preg_replace('#^(' ~ preg_quote($base, '#') ~ '|/)#', '', $uri), DIRECTORY_SEPARATOR, '/');
      $archive.add(new File($uri), $urn);
      $i++ % 10 || $this.out.write('.');
    }
  }

  /**
   * Handler for messages
   */
  [@handler]
  public void createXarRelease([:string] $build) {
    $version= new Version($build['version']);
    $this.out.writeLine('===> ', $version);

    $tempDir= new Folder('tmp');
    $tempDir.exists() || $tempDir.create(0755);

    // Download zip file
    $zip= $this.zipballOf(
      sprintf(self::ZIPBALL, $build['owner'], $build['repo'], $build['tag']),
      $tempDir
    );

    // Extract the zip file
    $this.out.write('---> Exporting [');
    with ($iter= $zip.iterator()) {
      $base= rtrim(($iter.next() as io.archive.zip.ZipDirEntry).getName() ~ '/', '/');
      while ($iter.hasNext()) {
        $entry= $iter.next();
        $relative= str_replace($base, '', $entry.getName());
        if ($entry.isDirectory()) {
          $folder= new Folder($tempDir, $relative);
          $folder.exists() || $folder.create(0755);
        } else {
          $file= new File($tempDir, $relative);
          try ($tran= new StreamTransfer($entry.getInputStream(), $file.getOutputStream())) {
            $tran.transferAll();
          }
        }
        $this.out.write('.');
      }
    }
    delete($zip);
    $this.out.writeLine(']');

    // Create version
    $targetDir= new Folder($tempDir, $version.getNumber());
    $targetDir.exists() || $targetDir.create(0755);

    // xp-rt-[VERSION].xar
    $coreSrc= new Folder($tempDir, 'core', 'src', 'main', 'php');
    $rtArchive= new Archive(new File($targetDir, 'xp-rt-' ~ $version.getNumber() ~ '.xar'));
    $rtArchive.open(ARCHIVE_CREATE);
    $rtArchive.addBytes('VERSION', $version.getNumber());
    foreach ($package in ['lang', 'xp', 'util', 'io', 'sapi', 'peer', 'rdbms', 'math', 'scriptlet', 'xml', 'remote', 'text', 'unittest', 'webservices', 'img', 'security', 'gui']) {
      $this.out.write('     >> ', $coreSrc, ' & ', $package, ' [');
      $this.addAll($rtArchive, new FileCollection(new Folder($coreSrc, $package)), $coreSrc.getURI());
      $this.out.writeLine(']');
    }
    $rtArchive.create();

    // xp-test-[VERSION].xar
    $testSrc= new Folder($tempDir, 'core', 'src', 'test', 'php');
    $testRes= new Folder($tempDir, 'core', 'src', 'test', 'resources');
    $utArchive= new Archive(new File($targetDir, 'xp-test-' ~ $version.getNumber() ~ '.xar'));
    $utArchive.open(ARCHIVE_CREATE);
    foreach ($origin in [$testSrc, $testRes]) {
      $this.out.write('     >> ', $origin, ' [');
      $this.addAll($utArchive, new FileCollection($origin), $origin.getURI());
      $this.out.writeLine(']');
    }
    $utArchive.create();

    // Index: Libraries
    try ($clIndex= new File($targetDir, 'lib.ar').getOutputStream()) {
      $this.out.writeLine('---> ', $clIndex);
      foreach ($entry in [$rtArchive, $utArchive]) {
        $this.addIndex($clIndex, $entry.file, 'lib/' ~ $entry.file.getFilename());
      }
    }

    // Index: Tools
    $toolSrc= new Folder($tempDir, 'core', 'tools');
    try ($tsIndex= new File($targetDir, 'tools.ar').getOutputStream()) {
      $this.out.writeLine('---> ', $tsIndex);
      foreach ($tool in ['class.php', 'web.php', 'xar.php', 'lang.base.php']) {
        $this.addIndex($tsIndex, new File($toolSrc, $tool), 'tools/' ~ $tool);
      }
    }

    // Index: Dependencies
    try ($dpIndex= new File($targetDir, 'depend.ar').getOutputStream()) {
      $this.out.writeLine('---> ', $dpIndex);
      $this.addIndex($dpIndex, new File('res', $version.getSeries() ~ '-depend.ini'), 'depend.ini');
    }

    // Index: Meta information
    try ($miIndex= new File($targetDir, 'meta-inf.ar').getOutputStream()) {
      $this.out.writeLine('---> ', $tsIndex);
      //$this.addIndex($miIndex, $release.toString(), 'ChangeLog');
      $this.addIndex($miIndex, ".\nlib/" ~ $rtArchive.file.getFileName(), 'boot.pth');
    }

    // Clean up
    // $this.tempDir.unlink();
  }
}