package net.xp_framework.build.subscriber;

import io.Folder;
import io.File;
import io.FileUtil;
import io.collections.FileCollection;
import io.collections.iterate.FilteredIOCollectionIterator;
import io.collections.iterate.CollectionFilter;
import io.collections.iterate.ExtensionEqualsFilter;

import native standard.sprintf;
import native standard.str_replace;
import native core.strlen;

/**
 * Creates XP .ar releases
 *
 * <pre>
 *   [release]
 *   |- depend.ar     : depend.ini
 *   |- lib.ar        : xp-rt-[VERSION].xar xp-test-[VERSION].xar
 *   |- meta-inf.ar   : boot.pth ChangeLog unittest/*.ini
 *   |- tools         : class.php web.php xar.php lang.base.php
 *   `- setup         : Setup script
 * </pre>
 */
public class XpReleaseFinalizer implements XarReleaseFinalizer {

  /**
   * Adds a file or a string to a given index
   *
   * @param   arg either an io.File or a string
   */
  protected void addIndex(io.streams.FileOutputStream $ar, var $arg, string $name= null) {
    if ($arg instanceof File) {
      $f= $arg as File?;
      $size= $f.size();
      isset($name) || $name= $f.getFilename();
      $stream= $f.getInputStream();
    } else {
      $size= strlen($arg);
      $stream= new io.streams.MemoryInputStream($arg);
    }

    $ar.write(sprintf("--%d:%s:--\n", $size, $name));
    try ($stream) {
      while ($stream.available()) {
        $ar.write($stream.read());
      }
    }
  }

  /**
   * Finalize
   */
  public void finalize([:var] $build, [:lang.archive.Archive] $archives, Folder $targetDir) {
    $version= $build['release']['version'];
    $baseDir= new Folder($build['checkout'], $build['build']['base']);

    // Index: Libraries
    try ($clIndex= new File($targetDir, 'lib.ar').getOutputStream()) {
      foreach ($entry in $archives) {
        $this.addIndex($clIndex, $entry.file, 'lib/' ~ $entry.file.getFilename());
      }
    }

    // Index: Tools
    $toolSrc= new Folder($baseDir, 'tools');
    try ($tsIndex= new File($targetDir, 'tools.ar').getOutputStream()) {
      foreach ($tool in ['class.php', 'web.php', 'xar.php', 'lang.base.php']) {
        $this.addIndex($tsIndex, new File($toolSrc, $tool), 'tools/' ~ $tool);
      }
    }

    // Index: Dependencies
    try ($dpIndex= new File($targetDir, 'depend.ar').getOutputStream()) {
      $this.addIndex($dpIndex, new File('res', $version['series'] ~ '-depend.ini'), 'depend.ini');
    }

    // Index: Meta information and test config
    $testCfg= new Folder($baseDir, 'src', 'test', 'config', 'unittest');
    try ($miIndex= new File($targetDir, 'meta-inf.ar').getOutputStream()) {
      $this.addIndex($miIndex, $build['release']['notes'], 'ChangeLog');
      $this.addIndex($miIndex, "lib/" ~ $archives['main'].file.getFileName() ~ "\n", 'boot.pth');
      $config= new FilteredIOCollectionIterator(new FileCollection($testCfg), new ExtensionEqualsFilter('.ini'));
      foreach ($ini in $config) {
        $f= new File($ini.getURI());
        $this.addIndex($miIndex, $f, 'unittest/' ~ $f.getFileName());
      }
    }

    // Add setup script
    FileUtil::setContents(new File($targetDir, 'setup'), str_replace(
      '@@VERSION@@', 
      $version['number'], 
      FileUtil::getContents(new File('res', $version['series'] ~ '-setup.php.in'))
    ));
  }
}