package net.xp_framework.build;

import io.Folder;
import io.File;
import io.streams.Streams;
import io.collections.FileCollection;
import io.collections.IOCollection;
import io.collections.iterate.FilteredIOCollectionIterator;
import io.collections.iterate.CollectionFilter;
import io.collections.iterate.NegationOfFilter;
import lang.archive.Archive;

import static util.cmd.Console::write;
import static util.cmd.Console::writeLine;

import native standard.ltrim;
import native standard.sscanf;
import native standard.strtr;
import native pcre.preg_replace;
import native pcre.preg_quote;

/**
 * Usage
 *
 * ```sh
 * $ xp net.xp_framework.build.Travis . $TRAVIS_REPO_SLUG $TRAVIS_TAG
 * ```
 */
public class Travis {
  protected static var $files= new NegationOfFilter(new CollectionFilter());
  protected static var $naming= [
    main : 'xp-{MODULE}-{VERSION}.xar',
    test : 'xp-{MODULE}-test-{VERSION}.xar'
  ];

  /**
   * Adds all files inside a given folder to the given archive
   */
  protected static void xar(Folder $src, Archive $xar) {
    $xar.open(ARCHIVE_CREATE);

    writeLine('---> ', $xar);
    foreach ($origin in new FilteredIOCollectionIterator(new FileCollection($src), new CollectionFilter())) {
      write('     >> Copy ', $origin, ' [');
      foreach ($i, $file in new FilteredIOCollectionIterator($origin, self::$files, true)) {
        $uri= $file.getURI();
        $urn= strtr(preg_replace('#^(' ~ preg_quote($origin.getURI(), '#') ~ '|/)#', '', $uri), DIRECTORY_SEPARATOR, '/');
        $xar.addFile($urn, new File($uri));
        $i % 10 || write('.');
      }
      writeLine(']');
    }

    return $xar;
  }

  /**
   * Entry point
   */
  public static void main(string[] $args) {
    $base= new Folder($args[0]);
    sscanf($args[1], '%[^/]/%s', $vendor, $module);
    $version= new Version(ltrim($args[2], 'rv'));
    $target= new Folder('.');

    writeLine('===> Building ', $vendor, '/', $module, ' ', $version, ' from ', $base);

    foreach ($type in ['main', 'test']) {
      $xar= self::xar(new Folder($base, 'src', $type), new Archive(new File($target, strtr(self::$naming[$type], [
        '{MODULE}'  : $module,
        '{VERSION}' : $version.getNumber()
      ]))));
      $xar.addBytes('VERSION', $version.getNumber());
      $xar.create();
    }

    try ($out= new File($target, 'glue.json').getOutputStream()) {
      $out.write(preg_replace(
        '/("version"\s*:\s*)"([^"])+"/',
        '$1"' ~ $version.getNumber() ~ '"',
        Streams::readAll(new File($base, 'glue.json').getInputStream())
      ));
    }

    writeLine('===> Done');
  }
}